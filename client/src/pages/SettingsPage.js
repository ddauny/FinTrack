import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useEffect, useState } from 'react';
import { api } from '@/lib/api';
export function SettingsPage() {
    const [profile, setProfile] = useState(null);
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [categories, setCategories] = useState([]);
    const [accForm, setAccForm] = useState({ name: '', type: 'Checking', initialBalance: 0 });
    const [catForm, setCatForm] = useState({ name: '', type: 'Expense' });
    const [showCatModal, setShowCatModal] = useState(false);
    const [groups, setGroups] = useState([]);
    const [groupForm, setGroupForm] = useState({ name: '' });
    const [showGroupModal, setShowGroupModal] = useState(false);
    const [itemForm, setItemForm] = useState({});
    const [showItemModalForGroup, setShowItemModalForGroup] = useState(null);
    const [depreciationValues, setDepreciationValues] = useState({});
    async function refresh() {
        const [p, c, g] = await Promise.all([api.settings.profile(), api.categories.list(), fetch('/api/asset-groups', { headers: { ...(localStorage.getItem('token') ? { Authorization: `Bearer ${localStorage.getItem('token')}` } : {}) } }).then(r => r.json())]);
        setProfile(p);
        setEmail(p?.email || '');
        setCategories(c);
        setGroups(g);
    }
    useEffect(() => { refresh(); }, []);
    return (_jsxs("div", { className: "p-2 sm:p-4 space-y-4", children: [_jsxs("div", { className: "bg-white p-3 sm:p-4 rounded shadow", children: [_jsx("div", { className: "font-semibold mb-2", children: "Profile" }), _jsxs("div", { className: "flex flex-col sm:flex-row gap-2", children: [_jsx("input", { value: email, onChange: e => setEmail(e.target.value), className: "border p-2 rounded flex-1" }), _jsx("input", { type: "password", value: password, onChange: e => setPassword(e.target.value), placeholder: "New password", className: "border p-2 rounded flex-1" }), _jsx("button", { onClick: async () => { await api.settings.updateProfile({ email, password: password || undefined }); setPassword(''); refresh(); }, className: "px-3 py-2 rounded bg-blue-600 text-white whitespace-nowrap", children: "Save" })] })] }), _jsxs("div", { className: "bg-white p-3 sm:p-4 rounded shadow", children: [_jsxs("div", { className: "flex items-center justify-between mb-2", children: [_jsx("div", { className: "font-semibold", children: "Categories" }), _jsx("button", { title: "Add category", onClick: () => setShowCatModal(true), className: "p-2 rounded bg-blue-600 text-white", "aria-label": "Add category", children: _jsx("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "currentColor", className: "w-5 h-5", children: _jsx("path", { d: "M11 11V5a1 1 0 112 0v6h6a1 1 0 110 2h-6v6a1 1 0 11-2 0v-6H5a1 1 0 110-2h6z" }) }) })] }), _jsx("div", { className: "border rounded h-64 overflow-auto", children: _jsxs("table", { className: "w-full text-sm", children: [_jsx("thead", { className: "sticky top-0 bg-white", children: _jsxs("tr", { className: "text-left border-b", children: [_jsx("th", { className: "p-2 w-1/2", children: "Name" }), _jsx("th", { className: "p-2 w-1/4", children: "Type" }), _jsx("th", { className: "p-2 w-1/4 text-right", children: "Actions" })] }) }), _jsx("tbody", { children: categories.map(c => (_jsxs("tr", { className: "border-b", children: [_jsx("td", { className: "p-2", children: c.name }), _jsx("td", { className: "p-2", children: _jsxs("select", { value: c.type, onChange: async (e) => { await api.categories.update(c.id, { name: c.name, type: e.target.value }); refresh(); }, className: "border p-1 rounded", children: [_jsx("option", { children: "Expense" }), _jsx("option", { children: "Income" })] }) }), _jsx("td", { className: "p-2 text-right", children: _jsx("button", { title: "Delete", onClick: async () => { const ok = confirm('Delete this category?'); if (!ok)
                                                        return; const res = await fetch(`/api/categories/${c.id}`, { method: 'DELETE', headers: { ...(localStorage.getItem('token') ? { Authorization: `Bearer ${localStorage.getItem('token')}` } : {}) } }); if (res.status === 409) {
                                                        alert('Category in use by transactions');
                                                        return;
                                                    } refresh(); }, className: "p-2 text-sm bg-red-600 text-white rounded", "aria-label": "Delete Category", children: _jsx("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "currentColor", className: "w-4 h-4", children: _jsx("path", { d: "M9 3a1 1 0 00-1 1v1H5a1 1 0 100 2h14a1 1 0 100-2h-3V4a1 1 0 00-1-1H9zm-2 6a1 1 0 011 1v8a1 1 0 102 0v-8a1 1 0 112 0v8a1 1 0 102 0v-8a1 1 0 112 0v8a3 3 0 01-3 3H10a3 3 0 01-3-3V10a1 1 0 011-1z" }) }) }) })] }, c.id))) })] }) })] }), showCatModal && (_jsx("div", { className: "fixed inset-0 bg-black/40 flex items-center justify-center p-4", children: _jsxs("div", { className: "bg-white rounded p-4 w-full max-w-sm space-y-2", children: [_jsx("div", { className: "font-semibold mb-2", children: "Add Category" }), _jsx("input", { value: catForm.name, onChange: e => setCatForm({ ...catForm, name: e.target.value }), placeholder: "Name", className: "w-full border p-2 rounded" }), _jsxs("select", { value: catForm.type, onChange: e => setCatForm({ ...catForm, type: e.target.value }), className: "w-full border p-2 rounded", children: [_jsx("option", { children: "Expense" }), _jsx("option", { children: "Income" })] }), _jsxs("div", { className: "flex justify-end gap-2 pt-2", children: [_jsx("button", { onClick: () => setShowCatModal(false), className: "px-3 py-2 rounded", children: "Cancel" }), _jsx("button", { onClick: async () => { if (!catForm.name)
                                        return; await api.categories.create(catForm); setCatForm({ name: '', type: 'Expense' }); setShowCatModal(false); refresh(); }, className: "px-3 py-2 rounded bg-blue-600 text-white", children: "Save" })] })] }) })), showGroupModal && (_jsx("div", { className: "fixed inset-0 bg-black/40 flex items-center justify-center p-4", children: _jsxs("div", { className: "bg-white rounded p-4 w-full max-w-sm space-y-2", children: [_jsx("div", { className: "font-semibold mb-2", children: "Add Asset Group" }), _jsx("input", { value: groupForm.name, onChange: e => setGroupForm({ ...groupForm, name: e.target.value }), placeholder: "Group name (e.g., Stock & ETF)", className: "w-full border p-2 rounded" }), _jsxs("div", { className: "flex justify-end gap-2 pt-2", children: [_jsx("button", { onClick: () => setShowGroupModal(false), className: "px-3 py-2 rounded", children: "Cancel" }), _jsx("button", { onClick: async () => { if (!groupForm.name)
                                        return; await fetch('/api/asset-groups', { method: 'POST', headers: { 'Content-Type': 'application/json', ...(localStorage.getItem('token') ? { Authorization: `Bearer ${localStorage.getItem('token')}` } : {}) }, body: JSON.stringify({ name: groupForm.name }) }); setGroupForm({ name: '' }); setShowGroupModal(false); refresh(); }, className: "px-3 py-2 rounded bg-blue-600 text-white", children: "Save" })] })] }) })), showItemModalForGroup && (_jsx("div", { className: "fixed inset-0 bg-black/40 flex items-center justify-center p-4", children: _jsxs("div", { className: "bg-white rounded p-4 w-full max-w-sm space-y-2", children: [_jsx("div", { className: "font-semibold mb-2", children: "Add Item" }), _jsx("input", { value: itemForm[showItemModalForGroup]?.name || '', onChange: e => setItemForm({ ...itemForm, [showItemModalForGroup]: { ...(itemForm[showItemModalForGroup] || {}), name: e.target.value } }), placeholder: "New item (e.g., Trade Republic)", className: "w-full border p-2 rounded" }), _jsx("input", { value: itemForm[showItemModalForGroup]?.description || '', onChange: e => setItemForm({ ...itemForm, [showItemModalForGroup]: { ...(itemForm[showItemModalForGroup] || {}), description: e.target.value } }), placeholder: "Description", className: "w-full border p-2 rounded" }), _jsxs("div", { className: "flex justify-end gap-2 pt-2", children: [_jsx("button", { onClick: () => setShowItemModalForGroup(null), className: "px-3 py-2 rounded", children: "Cancel" }), _jsx("button", { onClick: async () => { const it = itemForm[showItemModalForGroup]; if (!it?.name)
                                        return; await fetch(`/api/asset-groups/${showItemModalForGroup}/items`, { method: 'POST', headers: { 'Content-Type': 'application/json', ...(localStorage.getItem('token') ? { Authorization: `Bearer ${localStorage.getItem('token')}` } : {}) }, body: JSON.stringify(it) }); setItemForm({ ...itemForm, [showItemModalForGroup]: { name: '', description: '' } }); setShowItemModalForGroup(null); refresh(); }, className: "px-3 py-2 rounded bg-blue-600 text-white", children: "Save" })] })] }) })), _jsxs("div", { className: "bg-white p-4 rounded shadow", children: [_jsxs("div", { className: "flex justify-between items-center mb-2", children: [_jsx("div", { className: "font-semibold", children: "Asset Groups" }), _jsx("button", { title: "Add group", onClick: () => setShowGroupModal(true), className: "p-2 rounded bg-blue-600 text-white", "aria-label": "Add group", children: _jsx("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "currentColor", className: "w-5 h-5", children: _jsx("path", { d: "M11 11V5a1 1 0 112 0v6h6a1 1 0 110 2h-6v6a1 1 0 11-2 0v-6H5a1 1 0 110-2h6z" }) }) })] }), _jsx("div", { className: "space-y-4", children: groups.map(g => (_jsxs("div", { className: "border rounded p-3", children: [_jsxs("div", { className: "flex justify-between items-center mb-2", children: [_jsx("div", { className: "font-semibold", children: g.name }), _jsxs("div", { className: "flex gap-2", children: [_jsx("button", { title: "Add item", onClick: () => setShowItemModalForGroup(g.id), className: "p-2 rounded bg-blue-600 text-white", "aria-label": "Add item", children: _jsx("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "currentColor", className: "w-5 h-5", children: _jsx("path", { d: "M11 11V5a1 1 0 112 0v6h6a1 1 0 110 2h-6v6a1 1 0 11-2 0v-6H5a1 1 0 110-2h6z" }) }) }), _jsx("button", { title: "Delete group", onClick: async () => { const ok = confirm('Delete this group?'); if (!ok)
                                                        return; await fetch(`/api/asset-groups/${g.id}`, { method: 'DELETE', headers: { ...(localStorage.getItem('token') ? { Authorization: `Bearer ${localStorage.getItem('token')}` } : {}) } }); refresh(); }, className: "p-2 rounded bg-red-600 text-white", "aria-label": "Delete group", children: _jsx("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "currentColor", className: "w-5 h-5", children: _jsx("path", { d: "M9 3a1 1 0 00-1 1v1H5a1 1 0 100 2h14a1 1 0 100-2h-3V4a1 1 0 00-1-1H9zm-2 6a1 1 0 011 1v8a1 1 0 102 0v-8a1 1 0 112 0v8a1 1 0 102 0v-8a1 1 0 112 0v8a3 3 0 01-3 3H10a3 3 0 01-3-3V10a1 1 0 011-1z" }) }) })] })] }), _jsx("div", { className: "border rounded max-h-48 overflow-auto", children: _jsxs("table", { className: "w-full text-sm", children: [_jsx("thead", { children: _jsxs("tr", { className: "text-left border-b", children: [_jsx("th", { className: "p-2", children: "Item" }), _jsx("th", { className: "p-2", children: "Description" }), _jsx("th", { className: "p-2", children: "Depreciation (\u20AC/month)" }), _jsx("th", { className: "p-2 text-right", children: "Actions" })] }) }), _jsx("tbody", { children: g.items && g.items.filter((it) => !it.parentItemId).map((it) => {
                                                    return (_jsxs(_Fragment, { children: [_jsxs("tr", { className: "border-b", children: [_jsx("td", { className: "p-2", children: it.name }), _jsx("td", { className: "p-2", children: it.description }), _jsx("td", { className: "p-2", children: g.items.filter((ch) => ch.parentItemId === it.id).length === 0 ? (_jsx("input", { type: "number", step: "0.01", placeholder: "0.00", value: depreciationValues[it.id] !== undefined ? depreciationValues[it.id] : (it.depreciationAmount || ''), onChange: (e) => {
                                                                                setDepreciationValues(prev => ({ ...prev, [it.id]: e.target.value }));
                                                                            }, onBlur: async () => {
                                                                                const value = depreciationValues[it.id] ? Number(depreciationValues[it.id]) : null;
                                                                                try {
                                                                                    await fetch(`/api/asset-items/${it.id}`, {
                                                                                        method: 'PUT',
                                                                                        headers: { 'Content-Type': 'application/json', ...(localStorage.getItem('token') ? { Authorization: `Bearer ${localStorage.getItem('token')}` } : {}) },
                                                                                        body: JSON.stringify({ depreciationAmount: value })
                                                                                    });
                                                                                    await refresh();
                                                                                }
                                                                                catch (error) {
                                                                                    console.error('Error updating depreciation:', error);
                                                                                }
                                                                            }, className: "w-20 px-2 py-1 text-sm border rounded", title: "Monthly depreciation amount in euros" })) : (_jsx("span", { className: "text-gray-400 text-sm", children: "N/A (has children)" })) }), _jsx("td", { className: "p-2 text-right", children: _jsxs("div", { className: "flex gap-2 justify-end", children: [_jsx("button", { title: "Add child item", onClick: () => { setShowItemModalForGroup(null); setItemForm({ ...itemForm, [it.id]: { name: '', description: '' } }); const name = prompt('Child item name?'); if (name) {
                                                                                        fetch(`/api/asset-items/${it.id}/children`, { method: 'POST', headers: { 'Content-Type': 'application/json', ...(localStorage.getItem('token') ? { Authorization: `Bearer ${localStorage.getItem('token')}` } : {}) }, body: JSON.stringify({ name }) }).then(() => refresh());
                                                                                    } }, className: "p-2 rounded bg-blue-600 text-white", "aria-label": "Add child", children: _jsx("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "currentColor", className: "w-4 h-4", children: _jsx("path", { d: "M11 11V5a1 1 0 112 0v6h6a1 1 0 110 2h-6v6a1 1 0 11-2 0v-6H5a1 1 0 110-2h6z" }) }) }), _jsx("button", { title: "Delete Item", onClick: async () => { const ok = confirm('Delete this item?'); if (!ok)
                                                                                        return; await fetch(`/api/asset-items/${it.id}`, { method: 'DELETE', headers: { ...(localStorage.getItem('token') ? { Authorization: `Bearer ${localStorage.getItem('token')}` } : {}) } }); refresh(); }, className: "p-2 bg-red-600 text-white rounded", "aria-label": "Delete item", children: _jsx("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "currentColor", className: "w-4 h-4", children: _jsx("path", { d: "M9 3a1 1 0 00-1 1v1H5a1 1 0 100 2h14a1 1 0 100-2h-3V4a1 1 0 00-1-1H9zm-2 6a1 1 0 011 1v8a1 1 0 102 0v-8a1 1 0 112 0v8a1 1 0 102 0v-8a1 1 0 112 0v8a3 3 0 01-3 3H10a3 3 0 01-3-3V10a1 1 0 011-1z" }) }) })] }) })] }, it.id), g.items.filter((ch) => ch.parentItemId === it.id).map((ch) => {
                                                                return (_jsxs("tr", { className: "border-b", children: [_jsxs("td", { className: "p-2 pl-8", children: ["\u21B3 ", ch.name] }), _jsx("td", { className: "p-2", children: ch.description }), _jsx("td", { className: "p-2", children: _jsx("input", { type: "number", step: "0.01", placeholder: "0.00", value: depreciationValues[ch.id] !== undefined ? depreciationValues[ch.id] : (ch.depreciationAmount || ''), onChange: (e) => {
                                                                                    setDepreciationValues(prev => ({ ...prev, [ch.id]: e.target.value }));
                                                                                }, onBlur: async () => {
                                                                                    const value = depreciationValues[ch.id] ? Number(depreciationValues[ch.id]) : null;
                                                                                    try {
                                                                                        await fetch(`/api/asset-items/${ch.id}`, {
                                                                                            method: 'PUT',
                                                                                            headers: { 'Content-Type': 'application/json', ...(localStorage.getItem('token') ? { Authorization: `Bearer ${localStorage.getItem('token')}` } : {}) },
                                                                                            body: JSON.stringify({ depreciationAmount: value })
                                                                                        });
                                                                                        await refresh();
                                                                                    }
                                                                                    catch (error) {
                                                                                        console.error('Error updating depreciation:', error);
                                                                                    }
                                                                                }, className: "w-20 px-2 py-1 text-sm border rounded", title: "Monthly depreciation amount in euros" }) }), _jsx("td", { className: "p-2 text-right", children: _jsx("div", { className: "flex gap-2 justify-end", children: _jsx("button", { title: "Delete Item", onClick: async () => { const ok = confirm('Delete this item?'); if (!ok)
                                                                                        return; await fetch(`/api/asset-items/${ch.id}`, { method: 'DELETE', headers: { ...(localStorage.getItem('token') ? { Authorization: `Bearer ${localStorage.getItem('token')}` } : {}) } }); refresh(); }, className: "p-2 bg-red-600 text-white rounded", "aria-label": "Delete item", children: _jsx("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "currentColor", className: "w-4 h-4", children: _jsx("path", { d: "M9 3a1 1 0 00-1 1v1H5a1 1 0 100 2h14a1 1 0 100-2h-3V4a1 1 0 00-1-1H9zm-2 6a1 1 0 011 1v8a1 1 0 102 0v-8a1 1 0 112 0v8a1 1 0 102 0v-8a1 1 0 112 0v8a3 3 0 01-3 3H10a3 3 0 01-3-3V10a1 1 0 011-1z" }) }) }) }) })] }, `child-${ch.id}`));
                                                            })] }));
                                                }) })] }) })] }, g.id))) })] })] }));
}
