generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String
  createdAt    DateTime  @default(now())

  accounts     Account[]
  categories   Category[]
  transactions Transaction[]
  budgets      Budget[]
  portfolios   Portfolio[]
  manualAssets ManualAsset[]
  assetGroups  AssetGroup[]
}

model Account {
  id             Int       @id @default(autoincrement())
  userId         Int
  name           String
  type           String    // 'Checking', 'Savings', 'Credit Card', etc.
  initialBalance Decimal    @default(0.00)

  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions   Transaction[]
}

model Category {
  id       Int       @id @default(autoincrement())
  userId   Int
  name     String
  type     String    // 'Income' | 'Expense'

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  budgets  Budget[]
  txns     Transaction[] @relation("TxnCategory")
}

model Transaction {
  id         Int       @id @default(autoincrement())
  userId     Int
  accountId  Int
  categoryId Int
  date       DateTime
  amount     Decimal
  type       String    // 'Income' | 'Expense'
  notes      String?
  createdAt  DateTime  @default(now())

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  account    Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category   Category  @relation("TxnCategory", fields: [categoryId], references: [id])

  @@index([userId, date])
}

model Budget {
  id         Int      @id @default(autoincrement())
  userId     Int
  categoryId Int
  amount     Decimal
  period     String   // 'Monthly' | 'Yearly'

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id])
}

model Portfolio {
  id     Int      @id @default(autoincrement())
  userId Int
  name   String

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  holdings Holding[]
}

model Holding {
  id               Int      @id @default(autoincrement())
  portfolioId      Int
  tickerSymbol     String
  quantity         Decimal
  avgPurchasePrice Decimal

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model ManualAsset {
  id             Int      @id @default(autoincrement())
  userId         Int
  name           String
  type           String    // 'Real Estate', 'Vehicle', etc.
  estimatedValue Decimal
  associatedDebt Decimal    @default(0.00)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User-defined asset grouping for portfolio overview
model AssetGroup {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String   // e.g., 'Stock & ETF', 'Cash', 'Real Estate'
  // order removed per UX change

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     AssetItem[]
}

model AssetItem {
  id                 Int         @id @default(autoincrement())
  groupId           Int?
  parentItemId      Int?
  name              String      // e.g., 'Trade Republic', 'Revolut', 'Recrowd'
  description       String?
  hidden            Boolean     @default(false)
  depreciationAmount Decimal?   // Monthly depreciation amount (e.g., 250.00)

  group             AssetGroup? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  parentItem        AssetItem?  @relation("AssetItemToChildren", fields: [parentItemId], references: [id], onDelete: Cascade)
  children          AssetItem[] @relation("AssetItemToChildren")
  valuations        AssetValuation[]
}

// Snapshot values per month for each item
model AssetValuation {
  id        Int       @id @default(autoincrement())
  itemId    Int
  month     DateTime  // use first day of month
  value     Decimal

  item      AssetItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  @@unique([itemId, month])
}


